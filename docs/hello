Maana Q

 

 

 

 

 

Knowledge Technology Development Guide

 

 

Table of Contents

[Introduction.. 3](#_Toc520803552)

[Welcome to Maana.. 3](#_Toc520803553)

[Better and Faster. 3](#_Toc520803554)

[Scope. 3](#_Toc520803555)

[The Maana Platform.. 3](#_Toc520803556)

[Microservices as Peers. 3](#_Toc520803557)

[The Computational Knowledge Graph (CKG) 4](#_Toc520803558)

[GraphQL. 4](#_Toc520803559)

[The Maana Solution Core. 5](#_Toc520803560)

[CKG Features. 5](#_Toc520803561)

[Data Model Split. 6](#_Toc520803562)

[Useful Terms and Concepts. 6](#_Toc520803563)

[1.1.       Knowledge Microservices. 7](#_Toc520803564)

[1.2.       Knowledge Applications. 8](#_Toc520803565)

[1.3.       MAANA catalogue. 9](#_Toc520803566)

[2.     Defining a model in Maana. 9](#_Toc520803567)

[3.     Hydrating the model with data. 11](#_Toc520803568)

[4.     Querying a model 13](#_Toc520803569)

[4.1.       Query through service end points. 13](#_Toc520803570)

[4.2.       Query using global entry points. 14](#_Toc520803571)

[4.3.       Query using allinstances. 15](#_Toc520803572)

[4.4.       Query across kinds. 15](#_Toc520803573)

[5.     Developing knowledge microservices. 16](#_Toc520803574)

[5.1.       Project Setup. 16](#_Toc520803575)

[5.2.       Development. 17](#_Toc520803576)

[5.3.       Packaging.. 17](#_Toc520803577)

[5.4.       Adding a knowledge microservice to the MAANA catalogue. 17](#_Toc520803578)

[6.     Developing knowledge applications. 18](#_Toc520803579)

[7.     Troubleshooting. 18](#_Toc520803580)

[8.     Troubleshooting. 18](#_Toc520803581)

 

 

 

 

Introduction
============

Welcome to Maana
----------------

Maana was founded with the vision of using technology to systematize the world’s industrial expertise and data into digital knowledge that could significantly advance the global economy.  Our mission is to facilitate the tens of millions of experts working in industrial companies around the world, and give them the ability to make better decisions, faster.  We are devoted to putting the power of artificial intelligence (AI) into the hands of millions of industry experts, offering enhanced decision-making tools in a rapid response environment.

Better and Faster
-----------------

In 2013 Maana invented a new way to represent industrial knowledge mathematically, using the Maana Patented Computational Knowledge Graph™.  This unique technology enables industrial companies to encode human expertise and data from across silos into digital knowledge, eliminating the need to move data and enabling the creation of thousands of models at scale, through the re-usability of models across the enterprise.

Scope
-----

This guide is intended for the use of Solution Developers and Data Scientists, and describes how to develop such services (aka "bots") and applications and operationalize them in a production setting.

The Maana Platform
==================

The Maana platform is used by solutions teams to deliver knowledge applications to their end users (i.e., business users, SMEs, managers).  This “solution team” approach involves the collaboration of analysts, engineers, and data scientists.  The Maana platform is designed to build an enterprise-wide knowledge layer, utilizing search and exploration for solution development and delivery.  It is built from a network of GraphQL-based microservices.

Microservices as Peers
----------------------

Unlike pure client-server or n-tier architectures, Maana's microservices act as peers in an asynchronous and loosely-coupled arrangement that promotes independent scaling and extensibility.  They provide identity and access controls, graph persistence, search, machine learning, and natural language processing.  As a consequence, these peer microservices provide reasoning capabilities to Knowledge Applications, which help solve domain-specific problems and support optimal decision-making that is capable of learning over time.

The Computational Knowledge Graph (CKG)
---------------------------------------

The Computational Knowledge Graph (itself a microservice), provides automatic persistence, boilerplate queries and mutations, and service orchestration capabilities.  Taken together, these services allow the solution developer to focus on designing GraphQL schemas and implementing computational resolvers only where needed.

### GraphQL

Maana uses GraphQL to represent and expose its Knowledge Graph.  GraphQL is a data query language created by Facebook and open-sourced in 2015 as an alternative to REST interfaces.

 

GraphQL provides a complete and understandable description of the data in the API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.  With the GraphQL type system, the developers can access the full capabilities of your data from a single endpoint.

 

GraphQL creates a uniform API across your entire application without being limited by a specific storage engine.  The developer provides functions for each field in the type system, and GraphQL calls them with optimal concurrency.

#### Maana Platform Architecture and GraphQL

![](file:////Users/robertray/Library/Group Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image002.png)

 

 

For more information on using on Graph QL, please refer to the link provided below:

·       [How to GraphQL](https://www.howtographql.com/)

The Maana Solution Core
-----------------------

At the core of any Maana solution sits our Computational Knowledge Graph, a network of models built using machine learning techniques and artificial intelligence that powers AI-driven applications used to digitize decision support and operations.  It allows the knowledge of the business to be incrementally captured and grown, evolving and becoming increasingly sophisticated as more projects are developed.

### CKG Features

With the Computational Knowledge Graph:

·      The Graph is dynamic.  Nodes, which represent concepts in the graph, are not static containers, but rather act as computational vessels, allowing algorithms to be stored and executed.

·      Reusable Models - Knowledge Graph flexibility enables groups across the organization to leverage and build-upon models created by other groups, dramatically accelerating the speed at which models are created throughout the organization.  These models are dynamic, and once operationalized into applications, they learn and adapt based on the user behaviors and provide continuous intelligence for day-to-day operations.

·      The structure of data is separated from its content.  This separation enables a fluidity of modeling - data from any source or format can be seamlessly integrated, modeled, searched, analyzed, operationalized and re-purposed.

·      Data remains at the source - Only the most relevant data, within the context of what is being optimized, is indexed and brought into the graph.

·      Each resulting Data Model is a unique combination of three key components, which are instrumental in optimizing assets and decision flows:

1.     Subject Matter Expertise

2.     Relevant Data from Silos

3.     The Right Algorithm

**Note**:  These algorithms could be as simple as pulling in new data from an external source, to as complicated as classification of documents through machine learning. 

·      As source data is updated in real time, so are the nodes and the computational models that act on that data, permitting more complex relationships to be modeled, and enhancing the graph’s ability to understand the connections between concepts (rather than simple strings of data), and encouraging optimization of decisions and operations.

 

The CKG consists of **concepts** and **properties**, **instances** and **values**, and **relations** and **links**.

 

Consider the concept of a *ContainerShip* with the properties of *name*, *length*, *position*, etc.  A specific instance (entity) for our ContainerShip might have values for each of these properties, such as the vessel Maersk Viking having a length of *400 meters*.  Such properties can be scalar (e.g., numbers, strings, dates) or might refer to other concepts/instances - such as the *Hold Cargo* of the vessel.

 

In some cases, property values for an instance may simply be stored, as they are rarely subject to change.  In other cases, they will be dynamically computed, due to constantly changing values - such as a ship's *weight* (which is dependent upon its cargo) or variables like the vessel’s *current position* (which requires getting a GPS reading).

 

Unlike a traditional graph database, Maana incorporates arbitrary computation (through custom GraphQL resolvers) and distributes the graph into subgraphs managed by different microservices, optionally with their own dedicated persistence mechanism.  This separation enables a fluidity of modeling, allowing data from any source and in any format to be seamlessly integrated, modeled, searched, analyzed, operationalized and re-purposed.  It also places more responsibility on the microservices to provide their own storage.

### Data Model Split

To address this, Maana proposes an explicit split between the data models (i.e., GraphQL type definitions) that a service uses and its operations (i.e., GraphQL resolvers).  Maana will generate the appropriate managed service for such models using KindDB, Prisma, neo4j, etc.  With this, the solution developer only provides the logic they care about and let the system take care of all the CRUD/ORM-like operations on the data.

Useful Terms and Concepts
-------------------------

Prior to creating a working computational knowledge graph, it is suggested that you familiarize yourself with some basic terms and concepts that will help the make most out of the MAANA portal experience.  For a complete Glossary of Terms, please refer to the Appendix found at the back of this document.

 

Term

Definition

Example

Kinds

Kinds are concepts.  

People, Ships, Oil Wells, Invoices 

Fields

Fields are properties within a certain concept

For People:  age, sex, height, weight, etc.

Instances

A set of values for entities within a concept.

Paul, 40 yrs. old, male, 6', 180 pounds 

Values

A particular size, measure, number of an entity.

Example of a Value:  40 yrs. old

Relations

Connections /dependencies that can be established between fields belonging to different Kinds 

A Kind describing an oil well may contain a field showing the name of the company operating that well.  That field has a relation with the Kind containing Company Names.

 

 

 

 

